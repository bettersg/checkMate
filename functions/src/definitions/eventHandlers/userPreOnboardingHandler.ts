import { onMessagePublished } from "firebase-functions/v2/pubsub"
import { logger } from "firebase-functions"
import * as admin from "firebase-admin"
import { Timestamp, FieldValue } from "firebase-admin/firestore"
import {
  sendOnboardingFlow,
  sendLanguageSelection,
  sendCheckMateUsagePrompt,
  sendCheckMateDemonstration,
  sendUnsupportedTypeMessage,
  sendCheckSharingMessagePreOnboard,
  handleDisclaimer,
  sendMenuMessage,
  sendSharingMessage,
} from "../../definitions/common/responseUtils"
import { checkPreV2User } from "../../definitions/common/utils"
import {
  WhatsappMessageObject,
  LanguageSelection,
  GeneralMessage,
} from "../../types"
import { determineNeedsChecking } from "../../definitions/common/machineLearningServer/operations"
import { checkHelp } from "../../validators/whatsapp/checkWhatsappText"
import { publishToTopic } from "../../definitions/common/pubsub"
import { getUserSnapshot } from "../../services/user/userManagement"
import {
  checkMenu,
  checkShare,
} from "../../validators/whatsapp/checkWhatsappText"
import { onTemplateButtonReply } from "./userNavigationHandlers"

if (!admin.apps.length) {
  admin.initializeApp()
}

const PREPOPULATED_MESSAGE = "Show me how to use CheckMate"

const SAMPLE_MESSAGES = {
  appleScam: {
    message:
      "Your Apple ID Has Been Disabled Pending Further Verification #86359110",
    response: `üö® This is a scam. The message claiming your Apple ID is disabled is a phishing attempt. It uses unusual characters and formatting, which are red flags. Legitimate companies like Apple communicate clearly and professionally, directing users to official channels for verification. Do not click on any links or provide personal information in response to this message.

‚òùÔ∏èThis response was generated by AI on 02 Mar 2025.`,
    language: "en",
  },
  reachReal: {
    message: `Ministry of Digital Development and Information

---

REACH wants to hear your views on 2024 reflections and 2025 aspirations for Singapore.

1,200 eligible respondents will be selected at random to receive a $5 NTUC FairPrice e-voucher via SMS. Terms and conditions apply.

Visit <link> to complete the survey.

---

This is an automated message sent by the Singapore Government.`,
    response: `‚úÖ This is a legitimate government message. The survey invitation from REACH, Singapore's national feedback unit, aligns with their practice of gathering public feedback on the Budget. The link provided uses go.gov.sg, the official Singapore government link shortener, confirming its authenticity. 

‚òùÔ∏èThis response was generated by AI on 28 Feb 2025.`,
    language: "cn",
  },
  erpFake: {
    message: "ERP is going up in May 2025",
    response: `‚ùå This is untrue. Claims about ERP rates increasing in May 2025 are not supported by any official announcements. The Land Transport Authority (LTA) has not announced any changes for June 2025 either, and has explicitly stated that such reports are false. Always refer to LTA's official channels for accurate information on ERP rates.

‚òùÔ∏èThis response was generated by AI on 5 May 2025.`,
    language: "en",
  },
}

/**
 * Handles pre-onboarded user messages
 */
async function handlePreOnboardedMessage(
  userSnap: admin.firestore.DocumentSnapshot,
  message: WhatsappMessageObject
) {
  let step
  let shouldProcessJourney = true

  try {
    switch (message.type) {
      case "text":
        step = "preonboard_open"
        //if no text, throw error
        const text = message.text?.body
        if (!text) {
          throw new Error("No text in message")
        }
        if (text === PREPOPULATED_MESSAGE) {
          step = "preonboard_prepopulated"
          //wait 5 seconds before sending onboarding flow
          await sendCheckMateDemonstration(userSnap)
          break
        }
        if (checkMenu(text)) {
          step = "text_menu"
          await sendMenuMessage(userSnap, "MENU_PREFIX", "whatsapp", null, null)
          break
        }
        if (checkShare(text)) {
          step = "text_share"
          await sendSharingMessage(userSnap)
          break
        }
        if (checkHelp(text)) {
          step = "text_help"
          await sendCheckMateDemonstration(userSnap)
          break
        }
        if (userSnap.get("numPreOnboardSubmissionsRemaining") <= 0) {
          await sendOnboardingFlow(userSnap, false)
          step = "preonboard_limit_reached"
          break
        }

        const needsChecking = await determineNeedsChecking({
          text: text,
        })
        if (!needsChecking) {
          step = "preonboard_trivial"
          if (userSnap.get("numPreOnboardMessagesSent") > 0) {
            await sendCheckMateUsagePrompt(userSnap, true)
          } else {
            await sendLanguageSelection(userSnap, true)
          }
          break
        }

        // Non-trivial message that needs checking
        step = "preonboard_needs_checking"
        await createAndPublishMessage(message, userSnap)
        break

      case "image":
        if (userSnap.get("numPreOnboardSubmissionsRemaining") <= 0) {
          await sendOnboardingFlow(userSnap, false)
          step = "preonboard_limit_reached"
          break
        }
        step = "preonboard_image"
        await createAndPublishMessage(message, userSnap)
        break

      case "interactive":
        const interactive = message.interactive
        if (!interactive) {
          logger.error("Message has no interactive object")
          break
        }
        switch (interactive.type) {
          case "button_reply":
            step = await onPreOnboardButtonReply(userSnap, message)
            break
        }
        break

      case "button":
        await onTemplateButtonReply(userSnap, message)
        break
      default:
        step = "preonboard_unsupported"
        await sendUnsupportedTypeMessage(userSnap, message.id)
        await sendCheckMateUsagePrompt(userSnap, false)
        break
    }
    await userSnap.ref.update({
      numPreOnboardMessagesSent: FieldValue.increment(1),
    })
  } catch (error) {
    logger.error(`Error in handlePreOnboardedMessage: ${error}`)
  } finally {
    // Check if we should update the journey log
    if (checkPreV2User(userSnap)) {
      shouldProcessJourney = false
    }

    if (shouldProcessJourney && step) {
      const messageTimestamp = new Timestamp(Number(message.timestamp), 0)
      const timestampKey =
        messageTimestamp.toDate().toISOString().slice(0, -5) + "Z"

      await userSnap.ref.update({
        [`initialJourney.${timestampKey}`]: step,
      })
    }
  }
}

/**
 * Creates a GeneralMessage object and publishes it to the userNavigationEvents topic
 */
async function createAndPublishMessage(
  message: WhatsappMessageObject,
  userSnap: admin.firestore.DocumentSnapshot
) {
  //convert message to general Message object for processing
  let genericMessage: GeneralMessage = {
    source: "whatsapp",
    id: message.id,
    userId: message.from,
    isUserOnboarded: userSnap.get("isOnboardingComplete"),
    type: message.type,
    subject: null,
    text: message.text?.body ?? null,
    media: {
      fileId: message.image?.id ?? null, //to download the media
      caption: message.image?.caption ?? null,
      mimeType: message.image?.mime_type ?? null, //determines if it is an image or video
    },
    timestamp: message.timestamp,
    isForwarded: message.context?.forwarded,
    frequently_forwarded: message.context?.frequently_forwarded,
  }

  await publishToTopic("userGenericMessages", genericMessage, "whatsapp")
}

/**
 * Handles button replies from pre-onboarded users
 */
async function onPreOnboardButtonReply(
  userSnap: admin.firestore.DocumentSnapshot,
  messageObj: WhatsappMessageObject
) {
  const buttonId = messageObj.interactive?.button_reply.id
  if (!buttonId) {
    logger.error("No buttonId in interactive object")
    return
  }
  const [type, ...rest] = buttonId.split("_")
  let selection, instancePath
  switch (type) {
    case "show":
      await sendCheckMateDemonstration(userSnap)
      break
    case "signup":
      ;[selection] = rest
      if (selection === "new") {
        await sendOnboardingFlow(userSnap, true)
      } else {
        await sendOnboardingFlow(userSnap, false)
      }
      break
    case "languageSelection":
      ;[selection] = rest as [LanguageSelection]
      await userSnap.ref.update({
        language: selection,
      })
      await sendCheckMateDemonstration(userSnap)
      break
    case "controversial":
      ;[instancePath] = rest
      await handleDisclaimer(userSnap, instancePath)
      break
    case "erpFake":
    case "reachReal":
    case "appleScam":
      const message = SAMPLE_MESSAGES[type].message
      const response = SAMPLE_MESSAGES[type].response
      await sendCheckSharingMessagePreOnboard(userSnap, message, response)
      break
  }
  const step = "preonboard_button_" + type + (selection ? `_${selection}` : "")
  return step
}

/**
 * Checks if the message matches any sample messages and sends the appropriate response
 */

const onUserPreOnboardingPublish = onMessagePublished(
  {
    topic: "userPreOnboardingEvents",
    secrets: [
      "WHATSAPP_USER_BOT_PHONE_NUMBER_ID",
      "WHATSAPP_CHECKERS_BOT_PHONE_NUMBER_ID",
      "WHATSAPP_TOKEN",
      "VERIFY_TOKEN",
      "TYPESENSE_TOKEN",
      "OPENAI_API_KEY",
      "CHECKMATE_CORE_API_KEY",
    ],
    timeoutSeconds: 120,
  },
  async (event) => {
    if (event.data.message.json) {
      logger.log(`Processing ${event.data.message.messageId}`)

      try {
        const message = event.data.message.json as WhatsappMessageObject
        const userSnap = await getUserSnapshot(message.from, "whatsapp")
        if (userSnap && message) {
          await handlePreOnboardedMessage(userSnap, message)
          logger.log(
            `Successfully processed pre-onboarding message ${message.id}`
          )
        } else {
          logger.error("Missing required data in message payload")
        }
      } catch (error) {
        logger.error(`Error processing pre-onboarding message: ${error}`)
      }
    } else {
      logger.warn(
        `Unknown message type for messageId ${event.data.message.messageId})`
      )
    }
  }
)

export { onUserPreOnboardingPublish, SAMPLE_MESSAGES }
